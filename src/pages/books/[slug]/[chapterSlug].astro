---
// src/pages/books/[slug]/[chapterSlug].astro

import Layout from '../../../layouts/ReadingLayout.astro';
import path from 'node:path';
import type { MarkdownInstance, GetStaticPaths } from 'astro';

// This interface remains the same
interface ChapterFrontmatter {
  title: string;
  chapterNumber: number;
  status: string;
  wordCount: number;
  description: string;
  book?: string;
  book_url?: string;
}

// --- LOGIC FOR NEXT/PREVIOUS BUTTONS IS ALL IN HERE ---
export const getStaticPaths: GetStaticPaths = async () => {
  // 1. Get all chapters from all books, just like before.
  const allChapters = await Astro.glob<ChapterFrontmatter>('../../../content/*/chapter-*.md');

  // 2. Group chapters by their book slug.
  const chaptersByBook: Record<string, MarkdownInstance<ChapterFrontmatter>[]> = {};
  for (const chapter of allChapters) {
    const bookSlug = path.basename(path.dirname(chapter.file));
    if (!chaptersByBook[bookSlug]) {
      chaptersByBook[bookSlug] = [];
    }
    chaptersByBook[bookSlug].push(chapter);
  }

  const paths: Array<{
    params: { slug: string; chapterSlug: string };
    props: {
      chapter: MarkdownInstance<ChapterFrontmatter>;
      prevChapterUrl: string | null;
      nextChapterUrl: string | null;
    };
  }> = [];

  // 3. Process each book's chapters individually.
  for (const bookSlug in chaptersByBook) {
    // 4. IMPORTANT: Sort the chapters for the current book by chapter number.
    const sortedChapters = chaptersByBook[bookSlug].sort(
      (a, b) => a.frontmatter.chapterNumber - b.frontmatter.chapterNumber
    );

    // 5. Create a page for each chapter, now including links to its neighbors.
    sortedChapters.forEach((chapter, index) => {
      // Find the previous and next chapters in the sorted array
      const prevChapter = sortedChapters[index - 1];
      const nextChapter = sortedChapters[index + 1];

      // Construct URLs for them if they exist, otherwise they will be null
      const prevChapterUrl = prevChapter
        ? `/books/${bookSlug}/${path.basename(prevChapter.file, '.md')}`
        : null;
      const nextChapterUrl = nextChapter
        ? `/books/${bookSlug}/${path.basename(nextChapter.file, '.md')}`
        : null;

      paths.push({
        params: {
          slug: bookSlug,
          chapterSlug: path.basename(chapter.file, '.md'),
        },
        props: {
          chapter,
          prevChapterUrl, // Pass the previous chapter's URL as a prop
          nextChapterUrl, // Pass the next chapter's URL as a prop
        },
      });
    });
  }

  return paths;
};

// --- RECEIVE THE NEW PROPS ---
interface Props {
  chapter: MarkdownInstance<ChapterFrontmatter>;
  prevChapterUrl: string | null;
  nextChapterUrl: string | null;
}
const { chapter, prevChapterUrl, nextChapterUrl } = Astro.props;
const { Content, frontmatter } = chapter;

// Extract book slug from chapter file path
const bookSlug = path.basename(path.dirname(chapter.file));

// Get all chapters for the current book for chapter list
const allChapters = await Astro.glob<ChapterFrontmatter>('../../../content/*/chapter-*.md');
const bookChapters = allChapters
  .filter(ch => ch.file.includes(`/${bookSlug}/`))
  .map(ch => ({
    title: ch.frontmatter.title,
    chapterNumber: ch.frontmatter.chapterNumber,
    url: `/books/${bookSlug}/${path.basename(ch.file, '.md')}`,
    status: ch.frontmatter.status,
    wordCount: ch.frontmatter.wordCount
  }))
  .sort((a, b) => a.chapterNumber - b.chapterNumber);

// Book information
const bookInfo = {
  title: frontmatter.book || 'Unknown Book',
  slug: bookSlug,
  url: frontmatter.book_url || `/books/${bookSlug}`
};

// Current chapter information
const chapterInfo = {
  title: frontmatter.title,
  chapterNumber: frontmatter.chapterNumber,
  url: `/books/${bookSlug}/${path.basename(chapter.file, '.md')}`
};
---
<Layout title={`${frontmatter.title} - Unfiltered`}>
  <!-- Hidden data for ReadingExperience component -->
  <script type="application/json" id="book-info" set:html={JSON.stringify(bookInfo)}></script>
  <script type="application/json" id="chapter-info" set:html={JSON.stringify(chapterInfo)}></script>
  <script type="application/json" id="chapters-data" set:html={JSON.stringify(bookChapters)}></script>
  
  <!-- STEP 1: Add a main container for all chapters -->
  <div id="chapters-container">
    <!-- The initial chapter goes inside -->
    <div class="chapter-wrapper">
      <article class="chapter-prose">        
        <header class="chapter-header">
          <h1>{frontmatter.title}</h1>
          <p class="chapter-meta">
            <span>Chapter {frontmatter.chapterNumber}</span>
            •
            <span>{frontmatter.wordCount} words</span>
          </p>
        </header>

        <div class="chapter-body">
          <Content />
        </div>

        <footer class="chapter-footer" data-next-url={nextChapterUrl}>
          <nav class="chapter-nav">
            <div class="nav-link-wrapper">
              {prevChapterUrl && <a href={prevChapterUrl} class="nav-button prev">← Previous</a>}
            </div>
            <div class="nav-link-wrapper nav-link-wrapper--next">
                {nextChapterUrl && (
                    // CHANGE: id="next-chapter-link" becomes class="next-chapter-link"
                    <a href={nextChapterUrl} class="nav-button next next-chapter-link">
                        Next Chapter →
                    </a>
                )}
            </div>
          </nav>
        </footer>
      </article>
    </div>
  </div>
</Layout>


<style>
  /* Chapter container and layout */
  #chapters-container {
    max-width: var(--size-content-max-width);
    margin: 0 auto;
    padding: var(--space-md);
  }

  .chapter-wrapper {
    margin-bottom: var(--space-3xl);
  }

  .chapter-header {
    margin-bottom: var(--space-xl);
    text-align: center;
  }

  .chapter-header h1 {
    font-size: var(--font-size-2xl);
    font-weight: var(--font-weight-bold);
    color: var(--color-text-primary);
    line-height: var(--line-height-tight);
    margin: 0 0 var(--space-md) 0;
  }

  .chapter-meta {
    font-size: var(--font-size-sm);
    color: var(--color-text-secondary);
    margin: 0;
  }

  /* 
    CHAPTER PROSE STYLES
    Optimized for comfortable reading with proper spacing
  */
  .chapter-prose {
    /* Core readability settings */
    max-width: var(--size-prose-max-width);
    margin: 0 auto;
    padding: var(--space-lg);
    
    /* Typography for reading */
    font-size: var(--font-size-md);
    line-height: var(--line-height-loose);
    color: var(--color-text-primary);
    
    /* Text rendering improvements */
    hyphens: auto;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  .chapter-body {
    /* Ensure body content uses theme variables */
    font-size: var(--font-size, var(--font-size-md)) !important;
    font-family: var(--font-family, Georgia, serif) !important;
    line-height: var(--line-height-loose) !important;
    color: var(--theme-text, var(--color-text-primary)) !important;
  }

  /* Use global styles to override Astro's scoped CSS */
  :global(.chapter-body) {
    font-size: var(--font-size, var(--font-size-md)) !important;
    font-family: var(--font-family, Georgia, serif) !important;
    line-height: var(--line-height-loose) !important;
    color: var(--theme-text, var(--color-text-primary)) !important;
  }

  /* Paragraph spacing for comfortable reading */
  .chapter-prose p,
  .chapter-body p {
    margin-top: 0 !important;
    margin-bottom: 1.4em !important;
    text-align: left !important;
    font-size: inherit !important;
    line-height: inherit !important;
    color: inherit !important;
  }

  /* Global paragraph styles to override scoped CSS */
  :global(.chapter-body p) {
    margin-top: 0 !important;
    margin-bottom: 1.4em !important;
    text-align: left !important;
    font-size: inherit !important;
    line-height: inherit !important;
    color: inherit !important;
  }

  /* Headings within chapter content */
  .chapter-prose h1,
  .chapter-prose h2,
  .chapter-prose h3,
  .chapter-body h1,
  .chapter-body h2,
  .chapter-body h3 {
    font-weight: var(--font-weight-bold) !important;
    margin-top: 2.5em !important;
    margin-bottom: 1em !important;
    color: inherit !important;
    line-height: var(--line-height-tight) !important;
  }

  /* Global heading styles to override scoped CSS */
  :global(.chapter-body h1),
  :global(.chapter-body h2),
  :global(.chapter-body h3) {
    font-weight: var(--font-weight-bold) !important;
    margin-top: 2.5em !important;
    margin-bottom: 1em !important;
    color: inherit !important;
    line-height: var(--line-height-tight) !important;
  }

  .chapter-prose h2,
  .chapter-body h2 {
    font-size: var(--font-size-xl) !important;
  }

  .chapter-prose h3,
  .chapter-body h3 {
    font-size: var(--font-size-lg) !important;
  }

  :global(.chapter-body h2) {
    font-size: var(--font-size-xl) !important;
  }

  :global(.chapter-body h3) {
    font-size: var(--font-size-lg) !important;
  }

  /* Text emphasis */
  .chapter-prose em,
  .chapter-body em {
    font-style: italic !important;
    color: inherit !important;
  }

  .chapter-prose strong,
  .chapter-body strong {
    font-weight: var(--font-weight-bold) !important;
    color: inherit !important;
  }

  /* Global emphasis styles to override scoped CSS */
  :global(.chapter-body em) {
    font-style: italic !important;
    color: inherit !important;
  }

  :global(.chapter-body strong) {
    font-weight: var(--font-weight-bold) !important;
    color: inherit !important;
  }

  /* Chapter separator for infinite scroll */
  .chapter-wrapper:not(:first-child)::before {
    content: "◆ ◆ ◆";
    display: block;
    text-align: center;
    color: var(--color-brand-accent);
    font-size: var(--font-size-lg);
    margin: var(--space-2xl) 0;
    opacity: 0.6;
  }

  /* Chapter navigation */
  .chapter-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: var(--space-2xl);
    padding-top: var(--space-lg);
    border-top: 1px solid var(--color-border-primary);
  }

  .nav-link-wrapper {
    flex: 1;
  }

  .nav-link-wrapper--next {
    text-align: right;
  }

  .nav-button {
    display: inline-block;
    padding: var(--space-sm) var(--space-md);
    background-color: var(--color-surface-secondary);
    color: var(--color-text-primary);
    text-decoration: none;
    border-radius: var(--border-radius-md);
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
    transition: var(--transition-fast);
    border: 1px solid var(--color-border-primary);
  }

  .nav-button:hover {
    background-color: var(--color-interactive-hover-bg);
    color: var(--color-interactive-hover-fg);
    transform: translateY(-2px);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    #chapters-container {
      padding: var(--space-sm);
    }
    
    .chapter-prose {
      padding: var(--space-md);
      font-size: var(--font-size-base);
    }
    
    .chapter-header h1 {
      font-size: var(--font-size-xl);
    }
    
    .chapter-nav {
      flex-direction: column;
      gap: var(--space-sm);
    }
    
    .nav-link-wrapper--next {
      text-align: center;
    }
  }
</style>